# Parent workflow to be used by any clPageBuildPush*.yaml (children) actions
# Must be move in a different org repository in order to be invoked by children actions

# name: FE NextJs build and push to CL repository

# on:
#   workflow_call:
#     secrets:
#       API_TOKEN_GITHUB:
#         description: 'CloudBot Github Token'
#         required: true
#     inputs:
#       project:
#         description: 'The project name of which the workflow needs to be executed'
#         required: true
#         type: string
#       source-env-path:
#         description: 'Path of the source env files folder (to copy from)'
#         required: true
#         type: string
#       dest-env-path:
#         description: 'Path of the destination env files folder (to copy to)'
#         required: true
#         type: string
#       edge-enabled:
#         description: 'Edge support (NextJs /api) using Cloudflare Page Functions (no SSR support yet)'
#         default: false
#         required: false
#         type: boolean
#     outputs:
#       # Note: we use this output because there is no buildt-in `outcome` and `result` is always `success`
#       # if `continue-on-error` is set to `true`.
#       outcome:
#         description: >
#           The outcome status of the run ('success' or 'failure').
#           Note: this is only set when `continue-on-error` is `true`.
#         value: ${{ jobs.final.outputs.outcome }}

# permissions:  # added using https://github.com/step-security/secure-repo
#   contents: read

# jobs:
#   build-push:
#     runs-on: ubuntu-latest
#     outputs:
#       outcome: ${{ steps.final.outputs.outcome }}
#     steps:
#       - uses: actions/checkout@v3
#       - uses: actions/setup-node@v3
#         with:
#           node-version: '16.17.1'
#           cache: 'yarn'
#       - run: yarn install
#         id: install-deps

#       - name: Get the env file from the build folder
#         id: env-file
#         if: inputs.project != 'storybook'
#         run: mv ./${{ inputs.source-env-path }}/${{ github.ref == 'refs/heads/main' && 'prod' || 'stg' }}.env ./${{ inputs.dest-env-path }}/.env.local

#       - name: Build and export
#         id: build-export
#         run: yarn workspace @namespace/${{ inputs.project }} buildAndExport

#       - name: Edge api copy to functions
#         id: edge-functions
#         if: inputs.edge-enabled == true
#         run: |
#           mkdir -p ./${{ inputs.dest-env-path }}/build/deploy/functions
#           cp -R ./${{ inputs.dest-env-path }}/pages/api ./${{ inputs.dest-env-path }}/build/deploy/functions
#           sed -i 's/\ default//g' ./${{ inputs.dest-env-path }}/build/deploy/functions/api/*

#       - name: Copy namespace package.json version to the deploy/package.json version
#         id: copy-version
#         run: node ./scripts/versionCopy.js ${{ inputs.dest-env-path }}

#       - name: Get branch name
#         id: branch-name
#         uses: tj-actions/branch-names@v6

#       - name: Pushes compiled files to deployment repository on MAIN branch
#         id: build-push-main
#         if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/stg-')
#         uses: dmnemec/copy_file_to_another_repo_action@main
#         env:
#           API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
#         with:
#           source_file: "./${{ inputs.dest-env-path }}/build/deploy"
#           destination_repo: "org_name/fe-${{ github.ref == 'refs/heads/main' && 'prod' || 'stg' }}-${{ inputs.project }}"
#           user_email: 'fe.team.bot@org_name.com'
#           user_name: 'feTeamBot'
#           commit_message: ${{ github.event.head_commit.message }}

#       - name: Pushes compiled files to deployment repository on PREVIEW-RELEASE branch
#         id: build-push-preview-releases
#         if: contains('releases/', github.ref)
#         uses: dmnemec/copy_file_to_another_repo_action@main
#         env:
#           API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
#         with:
#           source_file: "./${{ inputs.dest-env-path }}/build/deploy"
#           destination_repo: "org_name/fe-prod-${{ inputs.project }}"
#           destination_branch: 'preview-release'
#           user_email: 'fe.team.bot@org_name.com'
#           user_name: 'feTeamBot'
#           commit_message: ${{ github.event.head_commit.message }}

#       - name: Pushes compiled files to deployment repository on existing branch (preview-stg)
#         id: build-push-existing-branch
#         if: contains('test-stg/', github.ref)
#         uses: dmnemec/copy_file_to_another_repo_action@main
#         env:
#           API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
#         with:
#           source_file: "./${{ inputs.dest-env-path }}/build/deploy"
#           destination_repo: "org_name/fe-stg-${{ inputs.project }}"
#           destination_branch: ${{ steps.branch-name.outputs.current_branch }}
#           user_email: 'fe.team.bot@org_name.com'
#           user_name: 'feTeamBot'
#           commit_message: ${{ github.event.head_commit.message }}

#       - name: Pushes compiled files to deployment repository on NEW branch (preview-stg)
#         id: build-push-preview-new-branch
#         if: github.event.created == true
#         uses: dmnemec/copy_file_to_another_repo_action@main
#         env:
#           API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
#         with:
#           source_file: "./${{ inputs.dest-env-path }}/build/deploy"
#           destination_repo: "org_name/fe-stg-${{ inputs.project }}"
#           destination_branch_create: ${{ steps.branch-name.outputs.current_branch }}
#           user_email: 'fe.team.bot@org_name.com'
#           user_name: 'feTeamBot'
#           commit_message: ${{ github.event.head_commit.message }}

#       - name: Final outcome
#         id: final
#         env:
#           SUCCESS: ${{ steps.build-push.outcome != 'failure' }}
#         run: |
#           echo "outcome=$([ "$SUCCESS" == "true" ] && echo "success" || echo "failure")" >> "${GITHUB_OUTPUT}"
#   final:
#     outputs:
#       outcome: ${{ steps.final.outputs.outcome }}
#     runs-on: ubuntu-latest
#     needs: [build-push]
#     # Note: always run even if needed jobs are skipped.
#     if: always()
#     steps:
#       - name: Final outcome
#         id: final
#         env:
#           SUCCESS: ${{ needs.build-push.outputs.outcome != 'failure' }}
#         run: |
#           echo "outcome=$([ "$SUCCESS" == "true" ] && echo "success" || echo "failure")" >> "$GITHUB_OUTPUT"
#           [ "$SUCCESS" == "true" ] || exit 27
